{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"09. Merging DataFrame","provenance":[],"collapsed_sections":[],"mount_file_id":"13agIjm2otsRoyrUWWIJUXQGqFgc9JcLb","authorship_tag":"ABX9TyNz8ICJwr/X68z6z5TSQuDi"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"el7BEzCtWax6"},"source":["# **Introduction**\n","\n","`Menggabungkan data` adalah salah satu hal yang penting dalam suatu pekerjaan data analyst atau data science. karena dalam banyak kasus data selalu berada dri berbagai file dan sumber. Maka menguasai penggabungan data beserta logika-logika penggabungan data menjadi hal yang esensi untuk di kuasai.\n","\n","Pandas menyediakan berbagai tool atau method yang memudahkan kita untuk melakukan penggabungan data dengan berbagai macam logika. method-method tersebut diantaranya seperti `join(), merge(), concat()`. kali ini kita kan mempelejari beberapa teknik tersebut.\n","\n","Ada beberapa logika penggabungan data, diantaranya adalah :\n","\n","* Inner Join\n","\n","* Full Outer Join\n","\n","* Left Outer Join\n","\n","* Right Outer Join\n","\n","* dll.\n","\n","![alt text](https://drive.google.com/uc?id=1SvNIxLrzx7SA9xBs6U8UC6RIK2n4rl8K)\n","\n","`Series.append` : Concatenate Series.\n","\n","`DataFrame.append` : Concatenate DataFrames.\n","\n","`DataFrame.join` : Join DataFrames using indexes.\n","\n","`DataFrame.merge` : Merge DataFrames by indexes or columns.\n","\n","\n","https://www.codepolitan.com/tujuh-teknik-join-di-sql-596c537f0deb3"]},{"cell_type":"markdown","metadata":{"id":"oiUf4FyDXNC7"},"source":["# **Penggabungan Baris dan Column dengan Metod concat()**\n","\n","Concat adalah salah satu metode untuk melakukan penggabungan data berdasarkan sumbu tertentu. langsung saja kita lihat.\n","\n","```\n","pd.concat(objs: Union[('DataFrame'), ('Series')], axis=0, join='outer', ignore_index: bool=False, keys=None, levels=None, names=None, verify_integrity: bool=False, sort: bool=False, copy: bool=True) \n","```\n","\n","Parameters\n","\n","..................\n","\n","* `objs` : a sequence or mapping of Series or DataFrame objects\n","\n","    If a dict is passed, the sorted keys will be used as the `keys` argument, unless it is passed, in which case the values will be selected (see below). Any None objects will be dropped silently unless they are all None in which case a ValueError will be raised.\n","\n","* `axis` : {0/'index', 1/'columns'}, default 0\n","\n","    The axis to concatenate along.\n","\n","* `join` : {'inner', 'outer'}, default 'outer'\n","\n","    How to handle indexes on other axis (or axes).\n","\n","* `ignore_index` : bool, default False\n","\n","    If True, do not use the index values along the concatenation axis. The resulting axis will be labeled 0, ..., n - 1. This is useful if you are concatenating objects where the concatenation axis does not have meaningful indexing information. Note the index values on the other axes are still respected in the join.\n","\n","* `keys` : sequence, default None\n","\n","    If multiple levels passed, should contain tuples. Construct hierarchical index using the passed keys as the outermost level.\n","\n","* `levels` : list of sequences, default None\n","\n","    Specific levels (unique values) to use for constructing a MultiIndex. Otherwise they will be inferred from the keys.\n","\n","* `names` : list, default None\n","\n","  Names for the levels in the resulting hierarchical index.\n","\n","* `verify_integrity` : bool, default False\n","\n","    Check whether the new concatenated axis contains duplicates. This can be very expensive relative to the actual data concatenation.\n","\n","* `sort` : bool, default False\n","\n","    Sort non-concatenation axis if it is not already aligned when `join` is 'outer'. This has no effect when ``join='inner'``, which already preserves the order of the non-concatenation axis.\n","\n","    .. versionadded:: 0.23.0\n","    .. versionchanged:: 1.0.0\n","\n","    Changed to not sort by default.\n","\n","* `copy` : bool, default True\n","\n","    If False, do not copy data unnecessarily."]},{"cell_type":"code","metadata":{"id":"BT_mGdihYZeK","executionInfo":{"status":"ok","timestamp":1617350485158,"user_tz":-480,"elapsed":1632,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":["# pd.concat?"],"execution_count":594,"outputs":[]},{"cell_type":"code","metadata":{"id":"Yuh7M-mz8LRX","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350486518,"user_tz":-480,"elapsed":2980,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"99a26949-a72e-4258-8577-b88e36c6d9d8"},"source":["import pandas as pd\n","\n","df1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],\n","                            'B': ['B0', 'B1', 'B2', 'B3'],\n","                            'C': ['C0', 'C1', 'C2', 'C3'],\n","                            'D': ['D0', 'D1', 'D2', 'D3']},\n","                           index=[0, 1, 2, 3])\n","df1"],"execution_count":595,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","      <th>D</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A0</td>\n","      <td>B0</td>\n","      <td>C0</td>\n","      <td>D0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>A1</td>\n","      <td>B1</td>\n","      <td>C1</td>\n","      <td>D1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>A2</td>\n","      <td>B2</td>\n","      <td>C2</td>\n","      <td>D2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>A3</td>\n","      <td>B3</td>\n","      <td>C3</td>\n","      <td>D3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    A   B   C   D\n","0  A0  B0  C0  D0\n","1  A1  B1  C1  D1\n","2  A2  B2  C2  D2\n","3  A3  B3  C3  D3"]},"metadata":{"tags":[]},"execution_count":595}]},{"cell_type":"code","metadata":{"id":"oPvPEYorX3Eq","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350486520,"user_tz":-480,"elapsed":2968,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"de2088b3-57bf-4f23-ca37-37af347c6c97"},"source":["df2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'],\n","                            'B': ['B4', 'B5', 'B6', 'B7'],\n","                            'C': ['C4', 'C5', 'C6', 'C7'],\n","                            'D': ['D4', 'D5', 'D6', 'D7']},\n","                           index=[4, 5, 6, 7])\n","df2"],"execution_count":596,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","      <th>D</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4</th>\n","      <td>A4</td>\n","      <td>B4</td>\n","      <td>C4</td>\n","      <td>D4</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>A5</td>\n","      <td>B5</td>\n","      <td>C5</td>\n","      <td>D5</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>A6</td>\n","      <td>B6</td>\n","      <td>C6</td>\n","      <td>D6</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>A7</td>\n","      <td>B7</td>\n","      <td>C7</td>\n","      <td>D7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    A   B   C   D\n","4  A4  B4  C4  D4\n","5  A5  B5  C5  D5\n","6  A6  B6  C6  D6\n","7  A7  B7  C7  D7"]},"metadata":{"tags":[]},"execution_count":596}]},{"cell_type":"code","metadata":{"id":"Zd1hNTPMX9m-","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350486521,"user_tz":-480,"elapsed":2955,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"d990fb28-2181-435f-d888-c9ff88584a25"},"source":["df3 = pd.DataFrame({'A': ['A8', 'A9', 'A10', 'A11'],\n","                            'B': ['B8', 'B9', 'B10', 'B11'],\n","                            'C': ['C8', 'C9', 'C10', 'C11'],\n","                            'D': ['D8', 'D9', 'D10', 'D11']},\n","                           index=[8, 9, 10, 11])\n","df3"],"execution_count":597,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","      <th>D</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>8</th>\n","      <td>A8</td>\n","      <td>B8</td>\n","      <td>C8</td>\n","      <td>D8</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>A9</td>\n","      <td>B9</td>\n","      <td>C9</td>\n","      <td>D9</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>A10</td>\n","      <td>B10</td>\n","      <td>C10</td>\n","      <td>D10</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>A11</td>\n","      <td>B11</td>\n","      <td>C11</td>\n","      <td>D11</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      A    B    C    D\n","8    A8   B8   C8   D8\n","9    A9   B9   C9   D9\n","10  A10  B10  C10  D10\n","11  A11  B11  C11  D11"]},"metadata":{"tags":[]},"execution_count":597}]},{"cell_type":"markdown","metadata":{"id":"OwckgrtbYGkw"},"source":["![alt text](https://drive.google.com/uc?id=1OhUI_5Now0GXcKaSvkHwi8ra8tn2jMxa)\n","\n","Perhatikan, data yang kita punya sangatlah simple, kita mempunyai 3 data yang mempunyai nama column yang sama. apabila kita ingin menggabungkan baris data ini, kita bisa menggunakan suatu method concat(). pertama kita buat terlebih dahulu list dari data yang akan kita gabung, kemudian masukan list tersebut sebagai argument kedalam method concat(). seperti ini."]},{"cell_type":"code","metadata":{"id":"AoYhwLVeYJ4V","colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"ok","timestamp":1617350486521,"user_tz":-480,"elapsed":2940,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"8ee9f3b2-4891-4d23-f179-36e058290889"},"source":["# list data yang akan di gabung\n","list_dataframe = [df1, df2, df3]\n","# gabungkan data dengan metode concat dari pandas\n","pd.concat(list_dataframe)"],"execution_count":598,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","      <th>D</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A0</td>\n","      <td>B0</td>\n","      <td>C0</td>\n","      <td>D0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>A1</td>\n","      <td>B1</td>\n","      <td>C1</td>\n","      <td>D1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>A2</td>\n","      <td>B2</td>\n","      <td>C2</td>\n","      <td>D2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>A3</td>\n","      <td>B3</td>\n","      <td>C3</td>\n","      <td>D3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>A4</td>\n","      <td>B4</td>\n","      <td>C4</td>\n","      <td>D4</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>A5</td>\n","      <td>B5</td>\n","      <td>C5</td>\n","      <td>D5</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>A6</td>\n","      <td>B6</td>\n","      <td>C6</td>\n","      <td>D6</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>A7</td>\n","      <td>B7</td>\n","      <td>C7</td>\n","      <td>D7</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>A8</td>\n","      <td>B8</td>\n","      <td>C8</td>\n","      <td>D8</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>A9</td>\n","      <td>B9</td>\n","      <td>C9</td>\n","      <td>D9</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>A10</td>\n","      <td>B10</td>\n","      <td>C10</td>\n","      <td>D10</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>A11</td>\n","      <td>B11</td>\n","      <td>C11</td>\n","      <td>D11</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      A    B    C    D\n","0    A0   B0   C0   D0\n","1    A1   B1   C1   D1\n","2    A2   B2   C2   D2\n","3    A3   B3   C3   D3\n","4    A4   B4   C4   D4\n","5    A5   B5   C5   D5\n","6    A6   B6   C6   D6\n","7    A7   B7   C7   D7\n","8    A8   B8   C8   D8\n","9    A9   B9   C9   D9\n","10  A10  B10  C10  D10\n","11  A11  B11  C11  D11"]},"metadata":{"tags":[]},"execution_count":598}]},{"cell_type":"markdown","metadata":{"id":"FcUFVdP2YmNd"},"source":["![alt text](https://drive.google.com/uc?id=1OCMETtvzJCgHjsxBOd3R11rAIBUEGKO6)"]},{"cell_type":"markdown","metadata":{"id":"n-OF5QokYqYf"},"source":["Apabila kita ingin menggabungkan data tersebut berdasarkan column, kita mesti memberikan satu argument lagi kedalam method concat yaitu axis, dengan nilai 1. seperti ini"]},{"cell_type":"code","metadata":{"id":"r9d4DvG2Yv5Z","colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"ok","timestamp":1617350486522,"user_tz":-480,"elapsed":2927,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"8551ab3d-4153-46ee-949d-28f9e2dde80b"},"source":["pd.concat(list_dataframe, axis=1)"],"execution_count":599,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","      <th>D</th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","      <th>D</th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","      <th>D</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A0</td>\n","      <td>B0</td>\n","      <td>C0</td>\n","      <td>D0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>A1</td>\n","      <td>B1</td>\n","      <td>C1</td>\n","      <td>D1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>A2</td>\n","      <td>B2</td>\n","      <td>C2</td>\n","      <td>D2</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>A3</td>\n","      <td>B3</td>\n","      <td>C3</td>\n","      <td>D3</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>A4</td>\n","      <td>B4</td>\n","      <td>C4</td>\n","      <td>D4</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>A5</td>\n","      <td>B5</td>\n","      <td>C5</td>\n","      <td>D5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>A6</td>\n","      <td>B6</td>\n","      <td>C6</td>\n","      <td>D6</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>A7</td>\n","      <td>B7</td>\n","      <td>C7</td>\n","      <td>D7</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>A8</td>\n","      <td>B8</td>\n","      <td>C8</td>\n","      <td>D8</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>A9</td>\n","      <td>B9</td>\n","      <td>C9</td>\n","      <td>D9</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>A10</td>\n","      <td>B10</td>\n","      <td>C10</td>\n","      <td>D10</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>A11</td>\n","      <td>B11</td>\n","      <td>C11</td>\n","      <td>D11</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      A    B    C    D    A    B    C    D    A    B    C    D\n","0    A0   B0   C0   D0  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n","1    A1   B1   C1   D1  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n","2    A2   B2   C2   D2  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n","3    A3   B3   C3   D3  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n","4   NaN  NaN  NaN  NaN   A4   B4   C4   D4  NaN  NaN  NaN  NaN\n","5   NaN  NaN  NaN  NaN   A5   B5   C5   D5  NaN  NaN  NaN  NaN\n","6   NaN  NaN  NaN  NaN   A6   B6   C6   D6  NaN  NaN  NaN  NaN\n","7   NaN  NaN  NaN  NaN   A7   B7   C7   D7  NaN  NaN  NaN  NaN\n","8   NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN   A8   B8   C8   D8\n","9   NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN   A9   B9   C9   D9\n","10  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  A10  B10  C10  D10\n","11  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  A11  B11  C11  D11"]},"metadata":{"tags":[]},"execution_count":599}]},{"cell_type":"markdown","metadata":{"id":"DfSvaDlMY0Tr"},"source":["Coba kalian perhatikan, penggabungan ini adalah penggabungan sumbu column pada setiap dataframe, dan pada sumbu baris di lakukan penggabungan juga berdasarkan indeks. secara default logika penggabunganya adalah outer join. kita akan melihat beberapa logika penggabungan setelah ini."]},{"cell_type":"markdown","metadata":{"id":"rOBMGFd8amnf"},"source":["........................................................................................................................................................................................\n"]},{"cell_type":"code","metadata":{"id":"ukMIJcq6asvC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617350486522,"user_tz":-480,"elapsed":2913,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"7b5c4548-4454-4154-f6cf-24b4226127f9"},"source":["# Combine two ``Series``.\n","\n","s1 = pd.Series(['a', 'b'])\n","s2 = pd.Series(['c', 'd'])\n","pd.concat([s1, s2])"],"execution_count":600,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    a\n","1    b\n","0    c\n","1    d\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":600}]},{"cell_type":"code","metadata":{"id":"kfhzHuNTa0Bl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617350486523,"user_tz":-480,"elapsed":2901,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"f2c0bfc6-bc02-4394-df40-4cce099b9f54"},"source":["# Clear the existing index and reset it in the result by setting the ``ignore_index`` option to ``True\n","pd.concat([s1, s2], ignore_index=True)"],"execution_count":601,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    a\n","1    b\n","2    c\n","3    d\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":601}]},{"cell_type":"code","metadata":{"id":"Je1nYHuQa8e0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617350486523,"user_tz":-480,"elapsed":2887,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"4eda02f1-fea1-4d6f-d488-caacf16afddf"},"source":["# Add a hierarchical index at the outermost level of the data with the ``keys`` option.\n","pd.concat([s1, s2], keys=['s1', 's2'])"],"execution_count":602,"outputs":[{"output_type":"execute_result","data":{"text/plain":["s1  0    a\n","    1    b\n","s2  0    c\n","    1    d\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":602}]},{"cell_type":"code","metadata":{"id":"sQNiNVFUbDiD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617350486524,"user_tz":-480,"elapsed":2872,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"2f4d6ac0-2f55-4dc2-acd9-ccfe4e2f4023"},"source":["# Label the index keys you create with the ``names`` option.\n","pd.concat([s1, s2], keys=['s1', 's2'], names=['Series name', 'Row ID'])"],"execution_count":603,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Series name  Row ID\n","s1           0         a\n","             1         b\n","s2           0         c\n","             1         d\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":603}]},{"cell_type":"code","metadata":{"id":"NjqsCSJhbKF4","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350486524,"user_tz":-480,"elapsed":2857,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"098413ff-1852-4817-92e1-55d7c49f9ec0"},"source":["# Combine two ``DataFrame`` objects with identical columns.\n","df1 = pd.DataFrame([['a', 1], ['b', 2]], columns=['letter', 'number'])\n","df1"],"execution_count":604,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>letter</th>\n","      <th>number</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>a</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>b</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  letter  number\n","0      a       1\n","1      b       2"]},"metadata":{"tags":[]},"execution_count":604}]},{"cell_type":"code","metadata":{"id":"LGlDy6DAbRKM","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350486524,"user_tz":-480,"elapsed":2842,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"c28264dc-82a7-4663-9630-252e52f7b7c0"},"source":["df2 = pd.DataFrame([['c', 3], ['d', 4]], columns=['letter', 'number'])\n","df2"],"execution_count":605,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>letter</th>\n","      <th>number</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>c</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>d</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  letter  number\n","0      c       3\n","1      d       4"]},"metadata":{"tags":[]},"execution_count":605}]},{"cell_type":"code","metadata":{"id":"icy_d-RkbU64","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350486525,"user_tz":-480,"elapsed":2829,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"5237994b-bb0f-425b-b8f7-8d7e89f9000b"},"source":["pd.concat([df1, df2])"],"execution_count":606,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>letter</th>\n","      <th>number</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>a</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>b</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>c</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>d</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  letter  number\n","0      a       1\n","1      b       2\n","0      c       3\n","1      d       4"]},"metadata":{"tags":[]},"execution_count":606}]},{"cell_type":"code","metadata":{"id":"xLXr1ArtbZWs","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350486526,"user_tz":-480,"elapsed":2815,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"a3d8a196-0c0f-490a-a795-9b085737bac8"},"source":["# Combine ``DataFrame`` objects with overlapping columns\n","# and return everything. Columns outside the intersection will\n","# be filled with ``NaN`` values.\n","\n","df3 = pd.DataFrame([['c', 3, 'cat'], ['d', 4, 'dog']], columns=['letter', 'number', 'animal'])\n","df3"],"execution_count":607,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>letter</th>\n","      <th>number</th>\n","      <th>animal</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>c</td>\n","      <td>3</td>\n","      <td>cat</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>d</td>\n","      <td>4</td>\n","      <td>dog</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  letter  number animal\n","0      c       3    cat\n","1      d       4    dog"]},"metadata":{"tags":[]},"execution_count":607}]},{"cell_type":"code","metadata":{"id":"_taek2pnbhmO","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350486527,"user_tz":-480,"elapsed":2800,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"43e28589-2bc7-4b29-f39b-aeac3f0cc740"},"source":["pd.concat([df1, df3], sort=False)"],"execution_count":608,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>letter</th>\n","      <th>number</th>\n","      <th>animal</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>a</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>b</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>c</td>\n","      <td>3</td>\n","      <td>cat</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>d</td>\n","      <td>4</td>\n","      <td>dog</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  letter  number animal\n","0      a       1    NaN\n","1      b       2    NaN\n","0      c       3    cat\n","1      d       4    dog"]},"metadata":{"tags":[]},"execution_count":608}]},{"cell_type":"code","metadata":{"id":"39iJQHhxbmMp","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350486527,"user_tz":-480,"elapsed":2780,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"b06eea29-fbc3-4a45-e418-5c0828826a14"},"source":["# Combine ``DataFrame`` objects with overlapping columns\n","# and return only those that are shared by passing ``inner`` to\n","# the ``join`` keyword argument.\n","pd.concat([df1, df3], join=\"inner\")"],"execution_count":609,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>letter</th>\n","      <th>number</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>a</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>b</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>c</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>d</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  letter  number\n","0      a       1\n","1      b       2\n","0      c       3\n","1      d       4"]},"metadata":{"tags":[]},"execution_count":609}]},{"cell_type":"code","metadata":{"id":"BUYUO2CYbpiC","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350486528,"user_tz":-480,"elapsed":2762,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"b8a42235-2627-4295-8524-b88e6d9036ef"},"source":["# Combine ``DataFrame`` objects horizontally along the x axis by\n","# passing in ``axis=1``.\n","df4 = pd.DataFrame([['bird', 'polly'], ['monkey', 'george']], columns=['animal', 'name'])\n","pd.concat([df1, df4], axis=1)"],"execution_count":610,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>letter</th>\n","      <th>number</th>\n","      <th>animal</th>\n","      <th>name</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>a</td>\n","      <td>1</td>\n","      <td>bird</td>\n","      <td>polly</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>b</td>\n","      <td>2</td>\n","      <td>monkey</td>\n","      <td>george</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  letter  number  animal    name\n","0      a       1    bird   polly\n","1      b       2  monkey  george"]},"metadata":{"tags":[]},"execution_count":610}]},{"cell_type":"code","metadata":{"id":"WUBW49MEb2fK","colab":{"base_uri":"https://localhost:8080/","height":77},"executionInfo":{"status":"ok","timestamp":1617350486529,"user_tz":-480,"elapsed":2749,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"4f7e6131-4452-4cc7-a200-0991a9cbd26e"},"source":["# Prevent the result from including duplicate index values with the\n","# ``verify_integrity`` option.\n","\n","df5 = pd.DataFrame([1], index=['a'])\n","df5"],"execution_count":611,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>a</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   0\n","a  1"]},"metadata":{"tags":[]},"execution_count":611}]},{"cell_type":"code","metadata":{"id":"D7LLcSp7b-hV","colab":{"base_uri":"https://localhost:8080/","height":77},"executionInfo":{"status":"ok","timestamp":1617350487433,"user_tz":-480,"elapsed":3637,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"599a19e1-c3ea-4fd7-e302-6d4f41fdd128"},"source":["df6 = pd.DataFrame([2], index=['a'])\n","df6"],"execution_count":612,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>a</th>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   0\n","a  2"]},"metadata":{"tags":[]},"execution_count":612}]},{"cell_type":"code","metadata":{"id":"fEuZj1Y4cDgG","executionInfo":{"status":"ok","timestamp":1617350487434,"user_tz":-480,"elapsed":3628,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":["# pd.concat([df5, df6], verify_integrity=True)\n","# Error : Indexes have overlapping values: Index(['a'], dtype='object')"],"execution_count":613,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TJvn-K7McPoZ"},"source":["# **Logika-Logika Penggabungan Dengan Metode merge()**\n","\n","`pd.merge(left, right, how: str='inner', on=None, left_on=None, right_on=None, left_index: bool=False, right_index: bool=False, sort: bool=False, suffixes=('_x', '_y'), copy: bool=True, indicator: bool=False, validate=None)`\n","\n","Parameters\n","\n","........................\n","\n","* `left` : DataFrame\n","* `right` : DataFrame or named Series\n","\n","    Object to merge with.\n","\n","* `how` : {'left', 'right', 'outer', 'inner'}, default 'inner'\n","\n","    Type of merge to be performed.\n","\n","    * `left`: use only keys from left frame, similar to a SQL left outer join;\n","      preserve key order.\n","    * `right`: use only keys from right frame, similar to a SQL right outer join;\n","      preserve key order.\n","    * `outer`: use union of keys from both frames, similar to a SQL full outer\n","      join; sort keys lexicographically.\n","    * `inner`: use intersection of keys from both frames, similar to a SQL inner\n","      join; preserve the order of the left keys.\n","\n","* `on` : label or list\n","\n","    Column or index level names to join on. These must be found in both DataFrames. If `on` is None and not merging on indexes then this defaults to the intersection of the columns in both DataFrames.\n","\n","* `left_on` : label or list, or array-like\n","\n","    Column or index level names to join on in the left DataFrame. Can also be an array or list of arrays of the length of the left DataFrame. These arrays are treated as if they are columns.\n","\n","* `right_on` : label or list, or array-like\n","\n","    Column or index level names to join on in the right DataFrame. Can also be an array or list of arrays of the length of the right DataFrame. These arrays are treated as if they are columns.\n","\n","* `left_index` : bool, default False\n","\n","    Use the index from the left DataFrame as the join key(s). If it is a MultiIndex, the number of keys in the other DataFrame (either the index or a number of columns) must match the number of levels.\n","\n","* `right_index` : bool, default False\n","\n","    Use the index from the right DataFrame as the join key. Same caveats as left_index.\n","\n","* `sort` : bool, default False\n","\n","    Sort the join keys lexicographically in the result DataFrame. If False, the order of the join keys depends on the join type (how keyword).\n","\n","* `suffixes` : tuple of (str, str), default ('_x', '_y')\n","\n","    Suffix to apply to overlapping column names in the left and right side, respectively. To raise an exception on overlapping columns use (False, False).\n","\n","* `copy` : bool, default True\n","\n","    If False, avoid copy if possible.\n","\n","* `indicator` : bool or str, default False\n","\n","    If True, adds a column to output DataFrame called \"_merge\" with information on the source of each row.\n","\n","    If string, column with information on source of each row will be added to output DataFrame, and column will be named value of string.\n","\n","    Information column is Categorical-type and takes on a value of \"left_only\" for observations whose merge key only appears in 'left' DataFrame, \"right_only\" for observations whose merge key only appears in 'right' DataFrame, and \"both\" if the observation's merge key is found in both.\n","\n","* `validate` : str, optional\n","\n","    If specified, checks if merge is of specified type.\n","\n","    * \"one_to_one\" or \"1:1\": check if merge keys are unique in both\n","      left and right datasets.\n","    * \"one_to_many\" or \"1:m\": check if merge keys are unique in left\n","      dataset.\n","    * \"many_to_one\" or \"m:1\": check if merge keys are unique in right\n","      dataset.\n","    * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n","\n","    .. versionadded:: 0.21.0"]},{"cell_type":"code","metadata":{"id":"ddG-Z8XZqnnw","executionInfo":{"status":"ok","timestamp":1617350487435,"user_tz":-480,"elapsed":3624,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":["pd.merge?"],"execution_count":614,"outputs":[]},{"cell_type":"code","metadata":{"id":"bnmkzyR7xxJi","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350487546,"user_tz":-480,"elapsed":3726,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"e99bf69c-d964-4047-9913-b3fb2fda5bd7"},"source":["df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],\n","                     'value': [1, 2, 3, 5]})\n","df1"],"execution_count":615,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>lkey</th>\n","      <th>value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>foo</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>bar</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>baz</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>foo</td>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  lkey  value\n","0  foo      1\n","1  bar      2\n","2  baz      3\n","3  foo      5"]},"metadata":{"tags":[]},"execution_count":615}]},{"cell_type":"code","metadata":{"id":"R0XrJXllx5qQ","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350487547,"user_tz":-480,"elapsed":3714,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"f8e41419-7803-418b-a70f-c85ae84770d0"},"source":["df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],\n","                    'value': [5, 6, 7, 8]})\n","df2"],"execution_count":616,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rkey</th>\n","      <th>value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>foo</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>bar</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>baz</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>foo</td>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  rkey  value\n","0  foo      5\n","1  bar      6\n","2  baz      7\n","3  foo      8"]},"metadata":{"tags":[]},"execution_count":616}]},{"cell_type":"code","metadata":{"id":"nHUXeFH20LZ1","colab":{"base_uri":"https://localhost:8080/","height":225},"executionInfo":{"status":"ok","timestamp":1617350487548,"user_tz":-480,"elapsed":3701,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"231a86b4-3af9-49a7-da12-5a9a9f674939"},"source":["df1.merge(df2, left_on='lkey', right_on='rkey')"],"execution_count":617,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>lkey</th>\n","      <th>value_x</th>\n","      <th>rkey</th>\n","      <th>value_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>foo</td>\n","      <td>1</td>\n","      <td>foo</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>foo</td>\n","      <td>1</td>\n","      <td>foo</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>foo</td>\n","      <td>5</td>\n","      <td>foo</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>foo</td>\n","      <td>5</td>\n","      <td>foo</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>bar</td>\n","      <td>2</td>\n","      <td>bar</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>baz</td>\n","      <td>3</td>\n","      <td>baz</td>\n","      <td>7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  lkey  value_x rkey  value_y\n","0  foo        1  foo        5\n","1  foo        1  foo        8\n","2  foo        5  foo        5\n","3  foo        5  foo        8\n","4  bar        2  bar        6\n","5  baz        3  baz        7"]},"metadata":{"tags":[]},"execution_count":617}]},{"cell_type":"code","metadata":{"id":"w2QoEfD70QkR","colab":{"base_uri":"https://localhost:8080/","height":225},"executionInfo":{"status":"ok","timestamp":1617350487548,"user_tz":-480,"elapsed":3687,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"b966ddc8-f457-4b4d-a80e-6ff92b82bea2"},"source":["# Merge DataFrames df1 and df2 with specified left and right suffixes\n","# appended to any overlapping columns.\n","\n","df1.merge(df2, left_on='lkey', right_on='rkey', suffixes=('_left', '_right'))"],"execution_count":618,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>lkey</th>\n","      <th>value_left</th>\n","      <th>rkey</th>\n","      <th>value_right</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>foo</td>\n","      <td>1</td>\n","      <td>foo</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>foo</td>\n","      <td>1</td>\n","      <td>foo</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>foo</td>\n","      <td>5</td>\n","      <td>foo</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>foo</td>\n","      <td>5</td>\n","      <td>foo</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>bar</td>\n","      <td>2</td>\n","      <td>bar</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>baz</td>\n","      <td>3</td>\n","      <td>baz</td>\n","      <td>7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  lkey  value_left rkey  value_right\n","0  foo           1  foo            5\n","1  foo           1  foo            8\n","2  foo           5  foo            5\n","3  foo           5  foo            8\n","4  bar           2  bar            6\n","5  baz           3  baz            7"]},"metadata":{"tags":[]},"execution_count":618}]},{"cell_type":"code","metadata":{"id":"t-VOiir30fm7","executionInfo":{"status":"ok","timestamp":1617350487548,"user_tz":-480,"elapsed":3675,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":["# Merge DataFrames df1 and df2, but raise an exception if the DataFrames have\n","# any overlapping columns.\n","\n","# df1.merge(df2, left_on='lkey', right_on='rkey', suffixes=(False, False))\n","\n","# columns overlap but no suffix specified: Index(['value'], dtype='object')"],"execution_count":619,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vkjvgX5EcTnT"},"source":["## **Full Outer Join**\n","![alt text](https://drive.google.com/uc?id=1qpaz_fKuJD_za3HmbuLX51OOxb-Zl8bj)\n","\n","* Full Outer Join menghasilkan gabungan index baris dari setiap data yang di gabung.\n","* Full Outer Join menggabungan pula column yang berbeda\n","* Memberikan nilai null untuk nilai column yang tidak di miliki oleh suatu index tertentu."]},{"cell_type":"code","metadata":{"id":"aw-WtiKtqIvb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617350487549,"user_tz":-480,"elapsed":3665,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"cf8a028f-160e-4e6c-aa4a-2141f7a06d61"},"source":["left = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],\n","                              'A': ['A0', 'A1', 'A2', 'A3'],\n","                              'B': ['B0', 'B1', 'B2', 'B3']})\n","\n","right = pd.DataFrame({'key': ['K0', 'K1', 'K4', 'K5'],\n","                                 'C': ['C0', 'C1', 'C2', 'C3'],\n","                                 'D': ['D0', 'D1', 'D2', 'D3']})\n","\n","print('data pertama')\n","print('=========')\n","print(left)\n","print('data kedua')\n","print('=========')\n","print(right)"],"execution_count":620,"outputs":[{"output_type":"stream","text":["data pertama\n","=========\n","  key   A   B\n","0  K0  A0  B0\n","1  K1  A1  B1\n","2  K2  A2  B2\n","3  K3  A3  B3\n","data kedua\n","=========\n","  key   C   D\n","0  K0  C0  D0\n","1  K1  C1  D1\n","2  K4  C2  D2\n","3  K5  C3  D3\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yiYEYRNmqROL"},"source":["Kita akan menggabungkan data ini dengan menggunakan method merge() dari pandas. dalam penggabungan kita kan gunakan column 'key' dari data kita sebagai variabel identifier dari data kita, atau sebagai column key/referensi.\n","\n","* Untuk melakukan penggabungan dengan menggunakan column key sebagai referensi penggabungan, maka kita akan memberikan argument `on` dengan nilai `key`\n","* untuk melakukan penggabungan outer join kita akan memberikan argument `how` dengan nilai `outer`"]},{"cell_type":"code","metadata":{"id":"TOIOw2JeqZsV","colab":{"base_uri":"https://localhost:8080/","height":225},"executionInfo":{"status":"ok","timestamp":1617350487549,"user_tz":-480,"elapsed":3650,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"4c26aabb-6b26-4089-e2ad-aa891c0e2b7c"},"source":["# gabungkan data dengan logika outer join\n","pd.merge(left, right, on='key', how='outer')"],"execution_count":621,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","      <th>D</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>K0</td>\n","      <td>A0</td>\n","      <td>B0</td>\n","      <td>C0</td>\n","      <td>D0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>K1</td>\n","      <td>A1</td>\n","      <td>B1</td>\n","      <td>C1</td>\n","      <td>D1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>K2</td>\n","      <td>A2</td>\n","      <td>B2</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>K3</td>\n","      <td>A3</td>\n","      <td>B3</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>K4</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>C2</td>\n","      <td>D2</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>K5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>C3</td>\n","      <td>D3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key    A    B    C    D\n","0  K0   A0   B0   C0   D0\n","1  K1   A1   B1   C1   D1\n","2  K2   A2   B2  NaN  NaN\n","3  K3   A3   B3  NaN  NaN\n","4  K4  NaN  NaN   C2   D2\n","5  K5  NaN  NaN   C3   D3"]},"metadata":{"tags":[]},"execution_count":621}]},{"cell_type":"markdown","metadata":{"id":"algbKADd1ngo"},"source":["## **Inner Join**\n","\n","![alt text](https://drive.google.com/uc?id=1NzYGC9t6SfUGQbHwXztc79ZissxtcXOl)\n","\n","Inner join ini akan menggabungkan data antara nilai key/referensi yang beririsan.\n","\n","Kita akan mencoba melakukan inner join dengan data yang sama pada outer join, Untuk melakukan inner join dengan metode merge(), kurang lebih sama seperti yang di lakukan pada outer join, kita hanya perlu mengubah argument argument how menjadi inner."]},{"cell_type":"code","metadata":{"id":"NfRzvzY62jB9","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350487550,"user_tz":-480,"elapsed":3636,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"90ba989f-a9b7-4453-b79c-d96a64d92ddd"},"source":["pd.merge(left, right, on='key', how='inner')"],"execution_count":622,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","      <th>D</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>K0</td>\n","      <td>A0</td>\n","      <td>B0</td>\n","      <td>C0</td>\n","      <td>D0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>K1</td>\n","      <td>A1</td>\n","      <td>B1</td>\n","      <td>C1</td>\n","      <td>D1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key   A   B   C   D\n","0  K0  A0  B0  C0  D0\n","1  K1  A1  B1  C1  D1"]},"metadata":{"tags":[]},"execution_count":622}]},{"cell_type":"markdown","metadata":{"id":"eZnrqv7-2rhm"},"source":["## **Left Join**\n","\n","![alt text](https://drive.google.com/uc?id=1cOWNA0KH3s27RJ5YS-qFKF6oWS_hIaeY)\n","\n","Left Outer Join menghasilkan seluruh data dari data yang kiri ditambah data kanan yang memiliki nilai key yang sama dengan data dari kiri.\n","\n","Kita akan mencoba melakukan left outer join dengan data yang sama pada outer join, untuk melakukan left outer join kita hanya perlu memberikan nilai ‘left’ kepada argument how."]},{"cell_type":"code","metadata":{"id":"sOBMPB-H21DU","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350487550,"user_tz":-480,"elapsed":3622,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"c02ffec8-cbc9-4168-866c-4565a7b46eed"},"source":["pd.merge(left, right, on='key', how='left')"],"execution_count":623,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","      <th>D</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>K0</td>\n","      <td>A0</td>\n","      <td>B0</td>\n","      <td>C0</td>\n","      <td>D0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>K1</td>\n","      <td>A1</td>\n","      <td>B1</td>\n","      <td>C1</td>\n","      <td>D1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>K2</td>\n","      <td>A2</td>\n","      <td>B2</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>K3</td>\n","      <td>A3</td>\n","      <td>B3</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key   A   B    C    D\n","0  K0  A0  B0   C0   D0\n","1  K1  A1  B1   C1   D1\n","2  K2  A2  B2  NaN  NaN\n","3  K3  A3  B3  NaN  NaN"]},"metadata":{"tags":[]},"execution_count":623}]},{"cell_type":"markdown","metadata":{"id":"FZerURG02439"},"source":["## **Right Join**\n","\n","Right outer join ini hanya kebalikan dari left outer join.\n","\n","Untuk melakukan operasi penggabungan right outer join dengan metode merge, kita hanya perlu memberikan nilai ‘right’ pada argument how."]},{"cell_type":"code","metadata":{"id":"VM3cmc_d24qU","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350487551,"user_tz":-480,"elapsed":3609,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"e8d5a407-af06-4d64-eeab-f7bece45bde1"},"source":["pd.merge(left, right, on='key', how='right')"],"execution_count":624,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>C</th>\n","      <th>D</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>K0</td>\n","      <td>A0</td>\n","      <td>B0</td>\n","      <td>C0</td>\n","      <td>D0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>K1</td>\n","      <td>A1</td>\n","      <td>B1</td>\n","      <td>C1</td>\n","      <td>D1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>K4</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>C2</td>\n","      <td>D2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>K5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>C3</td>\n","      <td>D3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key    A    B   C   D\n","0  K0   A0   B0  C0  D0\n","1  K1   A1   B1  C1  D1\n","2  K4  NaN  NaN  C2  D2\n","3  K5  NaN  NaN  C3  D3"]},"metadata":{"tags":[]},"execution_count":624}]},{"cell_type":"markdown","metadata":{"id":"QJjIHCdAfoHE"},"source":["# **Logika-Logika Penggabungan Dengan Metode merge 02**\n","\n","![alt text](https://drive.google.com/uc?id=1FE7gk2E0MQufuCKoF-RG3Aje_WnsDgIG)"]},{"cell_type":"code","metadata":{"id":"2DnTdqgVftne","executionInfo":{"status":"ok","timestamp":1617350487551,"user_tz":-480,"elapsed":3597,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":["import numpy as np\n","np.random.seed(0)\n","left = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)})    \n","right = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})"],"execution_count":625,"outputs":[]},{"cell_type":"code","metadata":{"id":"xZgdzVyWf1n6","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350487552,"user_tz":-480,"elapsed":3588,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"6434e5c5-f1d3-4874-c8f4-25cea74bd34e"},"source":["left"],"execution_count":626,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>1.764052</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>0.978738</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key     value\n","0   A  1.764052\n","1   B  0.400157\n","2   C  0.978738\n","3   D  2.240893"]},"metadata":{"tags":[]},"execution_count":626}]},{"cell_type":"code","metadata":{"id":"a2wP2uSmf2h-","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350487552,"user_tz":-480,"elapsed":3573,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"86ca3f6d-2aad-49d7-ff93-a7b40ad6b9d5"},"source":["right"],"execution_count":627,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>B</td>\n","      <td>1.867558</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>D</td>\n","      <td>-0.977278</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>E</td>\n","      <td>0.950088</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>F</td>\n","      <td>-0.151357</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key     value\n","0   B  1.867558\n","1   D -0.977278\n","2   E  0.950088\n","3   F -0.151357"]},"metadata":{"tags":[]},"execution_count":627}]},{"cell_type":"markdown","metadata":{"id":"fIxYLJ3Uhlsx"},"source":["## **Inner Join**\n","\n","![alt text](https://drive.google.com/uc?id=1IwvoidOYdbpbeTlNaFBea6ehFCTGpO3t)"]},{"cell_type":"code","metadata":{"id":"tZK0N7yxhrtI","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350487552,"user_tz":-480,"elapsed":3558,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"70a1b7ce-878e-4ddc-9ea4-e5cc827f3c18"},"source":["pd.merge(left, right, on='key')"],"execution_count":628,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value_x</th>\n","      <th>value_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","      <td>1.867558</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key   value_x   value_y\n","0   B  0.400157  1.867558\n","1   D  2.240893 -0.977278"]},"metadata":{"tags":[]},"execution_count":628}]},{"cell_type":"markdown","metadata":{"id":"oym9vpLKh1_a"},"source":["Dalam versi panda yang lebih baru (v0.21 atau lebih),`merge` sekarang menjadi fungsi urutan pertama, sehingga Anda dapat memanggil `DataFrame.merge` ."]},{"cell_type":"code","metadata":{"id":"ehbCmJT7h7yY","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350487553,"user_tz":-480,"elapsed":3544,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"70f9cb32-047a-496d-c540-24995bd3b544"},"source":["left.merge(right, on='key')\n","# Or, if you want to be explicit\n","# left.merge(right, on='key', how='inner')"],"execution_count":629,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value_x</th>\n","      <th>value_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","      <td>1.867558</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key   value_x   value_y\n","0   B  0.400157  1.867558\n","1   D  2.240893 -0.977278"]},"metadata":{"tags":[]},"execution_count":629}]},{"cell_type":"markdown","metadata":{"id":"V-qOY9F_ndVq"},"source":["## **Left Outer Join / Left Join**\n","\n","![alt text](https://drive.google.com/uc?id=1CHGW0mEFX5vW2w95c9mG7bPPG7pLMG5i)"]},{"cell_type":"code","metadata":{"id":"fDQ5u-ClnluG","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350487553,"user_tz":-480,"elapsed":3529,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"50f6c10d-95eb-4420-856e-2819cb306c58"},"source":["left.merge(right, on='key', how='left')"],"execution_count":630,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value_x</th>\n","      <th>value_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>1.764052</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","      <td>1.867558</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>0.978738</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key   value_x   value_y\n","0   A  1.764052       NaN\n","1   B  0.400157  1.867558\n","2   C  0.978738       NaN\n","3   D  2.240893 -0.977278"]},"metadata":{"tags":[]},"execution_count":630}]},{"cell_type":"markdown","metadata":{"id":"9xJ1qWM8nr5i"},"source":["## **Right Outer Join / Right Join**\n","\n","![alt text](https://drive.google.com/uc?id=1Brt9QqEg8oHBhpf0uUjRX8OXqwAP754q)"]},{"cell_type":"code","metadata":{"id":"xPqeP4Bsn6TR","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350487554,"user_tz":-480,"elapsed":3515,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"39b40a31-f7cb-45d3-91fb-2ddd1b5dd914"},"source":["left.merge(right, on='key', how='right')"],"execution_count":631,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value_x</th>\n","      <th>value_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","      <td>1.867558</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>0.950088</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>F</td>\n","      <td>NaN</td>\n","      <td>-0.151357</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key   value_x   value_y\n","0   B  0.400157  1.867558\n","1   D  2.240893 -0.977278\n","2   E       NaN  0.950088\n","3   F       NaN -0.151357"]},"metadata":{"tags":[]},"execution_count":631}]},{"cell_type":"markdown","metadata":{"id":"AM9IP_Msq8PM"},"source":["## **Full Outer Join**\n","\n","![alt text](https://drive.google.com/uc?id=1HeshZ0DZsa7J9ZZE0oxojNl1klBVtJ37)"]},{"cell_type":"code","metadata":{"id":"I1y9n8G_rElX","colab":{"base_uri":"https://localhost:8080/","height":225},"executionInfo":{"status":"ok","timestamp":1617350487554,"user_tz":-480,"elapsed":3500,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"dac4f3c5-f6f2-4eef-c298-4231108d53f2"},"source":["left.merge(right, on='key', how='outer')"],"execution_count":632,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value_x</th>\n","      <th>value_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>1.764052</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","      <td>1.867558</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>0.978738</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>0.950088</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>F</td>\n","      <td>NaN</td>\n","      <td>-0.151357</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key   value_x   value_y\n","0   A  1.764052       NaN\n","1   B  0.400157  1.867558\n","2   C  0.978738       NaN\n","3   D  2.240893 -0.977278\n","4   E       NaN  0.950088\n","5   F       NaN -0.151357"]},"metadata":{"tags":[]},"execution_count":632}]},{"cell_type":"markdown","metadata":{"id":"lr8jjAzsreLM"},"source":["## **Left Only**\n","\n","![alt text](https://drive.google.com/uc?id=148XgHcCnt4_Yqer5qb5rKLmemV0MP8xS)\n","\n"]},{"cell_type":"code","metadata":{"id":"Xr4oSC3RroIp","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350487555,"user_tz":-480,"elapsed":3487,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"babe221c-9851-4e7c-aabb-d8d9225fc66e"},"source":["# left.merge(right, on='key', how='left', indicator=True).query('_merge == \"left_only\"').drop('_merge', 1)\n","(left.merge(right, on='key', how='left', indicator=True)\n","     .query('_merge == \"left_only\"')\n","     .drop('_merge', 1))"],"execution_count":633,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value_x</th>\n","      <th>value_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>1.764052</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>0.978738</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key   value_x  value_y\n","0   A  1.764052      NaN\n","2   C  0.978738      NaN"]},"metadata":{"tags":[]},"execution_count":633}]},{"cell_type":"markdown","metadata":{"id":"cheRyInYsCHl"},"source":["Where"]},{"cell_type":"code","metadata":{"id":"wnY4MyZMsDP-","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350487555,"user_tz":-480,"elapsed":3470,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"f7c7e937-e704-48d5-db11-2ed1ef8cc692"},"source":["left.merge(right, on='key', how='left', indicator=True)"],"execution_count":634,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value_x</th>\n","      <th>value_y</th>\n","      <th>_merge</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>1.764052</td>\n","      <td>NaN</td>\n","      <td>left_only</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","      <td>1.867558</td>\n","      <td>both</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>0.978738</td>\n","      <td>NaN</td>\n","      <td>left_only</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","      <td>both</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key   value_x   value_y     _merge\n","0   A  1.764052       NaN  left_only\n","1   B  0.400157  1.867558       both\n","2   C  0.978738       NaN  left_only\n","3   D  2.240893 -0.977278       both"]},"metadata":{"tags":[]},"execution_count":634}]},{"cell_type":"markdown","metadata":{"id":"QzIIy2QVsL4-"},"source":["## **Right Only**\n","\n","![alt text](https://drive.google.com/uc?id=1oamd70WzrOMCI5rqqipM_3GrcNpXmGZv)"]},{"cell_type":"code","metadata":{"id":"csunY9KwsWVs","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350487555,"user_tz":-480,"elapsed":3454,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"bb4f1083-0326-41d0-a2a3-c071fbdf3ac9"},"source":["(left.merge(right, on='key', how='right', indicator=True)\n","     .query('_merge == \"right_only\"')\n","     .drop('_merge', 1))"],"execution_count":635,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value_x</th>\n","      <th>value_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>0.950088</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>F</td>\n","      <td>NaN</td>\n","      <td>-0.151357</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key  value_x   value_y\n","2   E      NaN  0.950088\n","3   F      NaN -0.151357"]},"metadata":{"tags":[]},"execution_count":635}]},{"cell_type":"code","metadata":{"id":"YzMTmkx4sd-Q","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350487556,"user_tz":-480,"elapsed":3436,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"506eb6d9-e772-4843-dcff-cf767c5154a2"},"source":["left.merge(right, on='key', how='right', indicator=True)"],"execution_count":636,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value_x</th>\n","      <th>value_y</th>\n","      <th>_merge</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","      <td>1.867558</td>\n","      <td>both</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","      <td>both</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>0.950088</td>\n","      <td>right_only</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>F</td>\n","      <td>NaN</td>\n","      <td>-0.151357</td>\n","      <td>right_only</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key   value_x   value_y      _merge\n","0   B  0.400157  1.867558        both\n","1   D  2.240893 -0.977278        both\n","2   E       NaN  0.950088  right_only\n","3   F       NaN -0.151357  right_only"]},"metadata":{"tags":[]},"execution_count":636}]},{"cell_type":"markdown","metadata":{"id":"rbPEnbiysiAe"},"source":["## **Left Only U Right Only**\n","\n","![alt text](https://drive.google.com/uc?id=1sQhw9yyNYjo7QP6yEFCIAgA2p4hkryD3)"]},{"cell_type":"code","metadata":{"id":"lvWQuPEmsw2s","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350487556,"user_tz":-480,"elapsed":3420,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"b7f47416-73a1-4300-acff-af385f2d3b9d"},"source":["(left.merge(right, on='key', how='outer', indicator=True)\n","     .query('_merge != \"both\"')\n","     .drop('_merge', 1))"],"execution_count":637,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value_x</th>\n","      <th>value_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>1.764052</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>0.978738</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>0.950088</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>F</td>\n","      <td>NaN</td>\n","      <td>-0.151357</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key   value_x   value_y\n","0   A  1.764052       NaN\n","2   C  0.978738       NaN\n","4   E       NaN  0.950088\n","5   F       NaN -0.151357"]},"metadata":{"tags":[]},"execution_count":637}]},{"cell_type":"code","metadata":{"id":"AK4z1jEss5FM","colab":{"base_uri":"https://localhost:8080/","height":225},"executionInfo":{"status":"ok","timestamp":1617350488675,"user_tz":-480,"elapsed":4521,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"801772a2-6890-4318-c498-bd4a1f78ab52"},"source":["left.merge(right, on='key', how='outer', indicator=True)"],"execution_count":638,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value_x</th>\n","      <th>value_y</th>\n","      <th>_merge</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>1.764052</td>\n","      <td>NaN</td>\n","      <td>left_only</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","      <td>1.867558</td>\n","      <td>both</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>0.978738</td>\n","      <td>NaN</td>\n","      <td>left_only</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","      <td>both</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>0.950088</td>\n","      <td>right_only</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>F</td>\n","      <td>NaN</td>\n","      <td>-0.151357</td>\n","      <td>right_only</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key   value_x   value_y      _merge\n","0   A  1.764052       NaN   left_only\n","1   B  0.400157  1.867558        both\n","2   C  0.978738       NaN   left_only\n","3   D  2.240893 -0.977278        both\n","4   E       NaN  0.950088  right_only\n","5   F       NaN -0.151357  right_only"]},"metadata":{"tags":[]},"execution_count":638}]},{"cell_type":"markdown","metadata":{"id":"Lh1gLjzwvm5v"},"source":["# **Nama berbeda untuk kolom kunci**"]},{"cell_type":"code","metadata":{"id":"mD7zJaTLvxEZ","executionInfo":{"status":"ok","timestamp":1617350488676,"user_tz":-480,"elapsed":4510,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":["import numpy as np\n","np.random.seed(0)\n","left = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)})    \n","right = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})\n","\n","left2 = left.rename({'key':'keyLeft'}, axis=1)\n","right2 = right.rename({'key':'keyRight'}, axis=1)"],"execution_count":639,"outputs":[]},{"cell_type":"code","metadata":{"id":"jt3WZe-dv19q","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350488677,"user_tz":-480,"elapsed":4500,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"52c2ac83-4d93-402a-8775-932319c3c1fe"},"source":["left2"],"execution_count":640,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>keyLeft</th>\n","      <th>value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>1.764052</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>0.978738</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  keyLeft     value\n","0       A  1.764052\n","1       B  0.400157\n","2       C  0.978738\n","3       D  2.240893"]},"metadata":{"tags":[]},"execution_count":640}]},{"cell_type":"code","metadata":{"id":"z0Ju4SvHv4rK","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350488677,"user_tz":-480,"elapsed":4481,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"85b5d033-e67b-4f0f-8c7d-28561380d096"},"source":["right2"],"execution_count":641,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>keyRight</th>\n","      <th>value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>B</td>\n","      <td>1.867558</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>D</td>\n","      <td>-0.977278</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>E</td>\n","      <td>0.950088</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>F</td>\n","      <td>-0.151357</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  keyRight     value\n","0        B  1.867558\n","1        D -0.977278\n","2        E  0.950088\n","3        F -0.151357"]},"metadata":{"tags":[]},"execution_count":641}]},{"cell_type":"code","metadata":{"id":"eXVnGC8Sv-JH","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350488677,"user_tz":-480,"elapsed":4465,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"9b454c03-1655-4f42-db34-a77f8f4ee8d1"},"source":["left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')"],"execution_count":642,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>keyLeft</th>\n","      <th>value_x</th>\n","      <th>keyRight</th>\n","      <th>value_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","      <td>B</td>\n","      <td>1.867558</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>D</td>\n","      <td>-0.977278</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  keyLeft   value_x keyRight   value_y\n","0       B  0.400157        B  1.867558\n","1       D  2.240893        D -0.977278"]},"metadata":{"tags":[]},"execution_count":642}]},{"cell_type":"markdown","metadata":{"id":"5U6PuKv6wCdO"},"source":["# **Menghindari kolom kunci duplikat dalam output**"]},{"cell_type":"code","metadata":{"id":"gFApmW8bhzdv","executionInfo":{"status":"ok","timestamp":1617350488678,"user_tz":-480,"elapsed":4454,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":["import numpy as np\n","np.random.seed(0)\n","left = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)})    \n","right = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})\n","\n","left2 = left.rename({'key':'keyLeft'}, axis=1)\n","right2 = right.rename({'key':'keyRight'}, axis=1)"],"execution_count":643,"outputs":[]},{"cell_type":"code","metadata":{"id":"4W9m9o3XwjUg","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350488678,"user_tz":-480,"elapsed":4441,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"ed3327fb-aaad-4f6b-8937-1a5280ef9f6e"},"source":["left2"],"execution_count":644,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>keyLeft</th>\n","      <th>value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>1.764052</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>0.978738</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  keyLeft     value\n","0       A  1.764052\n","1       B  0.400157\n","2       C  0.978738\n","3       D  2.240893"]},"metadata":{"tags":[]},"execution_count":644}]},{"cell_type":"code","metadata":{"id":"VBHuUUDDweCx","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1617350488679,"user_tz":-480,"elapsed":4426,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"e726647e-c020-4a91-c1ee-51ebca06d82a"},"source":["left3 = left2.set_index('keyLeft')\n","left3"],"execution_count":645,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>value</th>\n","    </tr>\n","    <tr>\n","      <th>keyLeft</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>A</th>\n","      <td>1.764052</td>\n","    </tr>\n","    <tr>\n","      <th>B</th>\n","      <td>0.400157</td>\n","    </tr>\n","    <tr>\n","      <th>C</th>\n","      <td>0.978738</td>\n","    </tr>\n","    <tr>\n","      <th>D</th>\n","      <td>2.240893</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            value\n","keyLeft          \n","A        1.764052\n","B        0.400157\n","C        0.978738\n","D        2.240893"]},"metadata":{"tags":[]},"execution_count":645}]},{"cell_type":"code","metadata":{"id":"pcxPdKq-woCW","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350488679,"user_tz":-480,"elapsed":4410,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"7b4d4b09-2e25-4cf6-8a72-f8c374f6ac70"},"source":["right2"],"execution_count":646,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>keyRight</th>\n","      <th>value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>B</td>\n","      <td>1.867558</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>D</td>\n","      <td>-0.977278</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>E</td>\n","      <td>0.950088</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>F</td>\n","      <td>-0.151357</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  keyRight     value\n","0        B  1.867558\n","1        D -0.977278\n","2        E  0.950088\n","3        F -0.151357"]},"metadata":{"tags":[]},"execution_count":646}]},{"cell_type":"code","metadata":{"id":"zNxW4YfqwmF6","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350488680,"user_tz":-480,"elapsed":4397,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"e8499add-710a-458c-ebc6-e5901bbef3e5"},"source":["left3.merge(right2, left_index=True, right_on='keyRight')"],"execution_count":647,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>value_x</th>\n","      <th>keyRight</th>\n","      <th>value_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.400157</td>\n","      <td>B</td>\n","      <td>1.867558</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.240893</td>\n","      <td>D</td>\n","      <td>-0.977278</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    value_x keyRight   value_y\n","0  0.400157        B  1.867558\n","1  2.240893        D -0.977278"]},"metadata":{"tags":[]},"execution_count":647}]},{"cell_type":"markdown","metadata":{"id":"6GuvyH27zJPn"},"source":["# **Menggabungkan hanya satu kolom dari salah satu DataFrames**"]},{"cell_type":"code","metadata":{"id":"3Gdix2Omjvde","executionInfo":{"status":"ok","timestamp":1617350488680,"user_tz":-480,"elapsed":4386,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":["import numpy as np\n","np.random.seed(0)\n","left = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)})    \n","right = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})\n","\n","left2 = left.rename({'key':'keyLeft'}, axis=1)\n","right2 = right.rename({'key':'keyRight'}, axis=1)"],"execution_count":648,"outputs":[]},{"cell_type":"code","metadata":{"id":"5P6tPWxizPJT","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350488681,"user_tz":-480,"elapsed":4377,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"422fc735-ece2-4571-9dc4-b87ee80a8a66"},"source":["right"],"execution_count":649,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>B</td>\n","      <td>1.867558</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>D</td>\n","      <td>-0.977278</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>E</td>\n","      <td>0.950088</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>F</td>\n","      <td>-0.151357</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key     value\n","0   B  1.867558\n","1   D -0.977278\n","2   E  0.950088\n","3   F -0.151357"]},"metadata":{"tags":[]},"execution_count":649}]},{"cell_type":"code","metadata":{"id":"I_gHvPN-zIoL","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350488681,"user_tz":-480,"elapsed":4363,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"6602e7fc-3dc2-4f28-f53b-f8e89787118b"},"source":["right3 = right.assign(newcol=np.arange(len(right)))\n","right3"],"execution_count":650,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value</th>\n","      <th>newcol</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>B</td>\n","      <td>1.867558</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>D</td>\n","      <td>-0.977278</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>E</td>\n","      <td>0.950088</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>F</td>\n","      <td>-0.151357</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key     value  newcol\n","0   B  1.867558       0\n","1   D -0.977278       1\n","2   E  0.950088       2\n","3   F -0.151357       3"]},"metadata":{"tags":[]},"execution_count":650}]},{"cell_type":"code","metadata":{"id":"53vQqRJD50zQ","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350488682,"user_tz":-480,"elapsed":4350,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"a2a4d88b-fc97-44c8-96fd-bb3770acea04"},"source":["left.merge(right3[['key', 'newcol']], on='key')"],"execution_count":651,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value</th>\n","      <th>newcol</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key     value  newcol\n","0   B  0.400157       0\n","1   D  2.240893       1"]},"metadata":{"tags":[]},"execution_count":651}]},{"cell_type":"code","metadata":{"id":"cwyueR_K54QM","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350488682,"user_tz":-480,"elapsed":4336,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"39fcf43b-26d2-4423-a643-a9c1ac81f35e"},"source":["left.merge(right3[['key', 'newcol']], on='key', how='left')"],"execution_count":652,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>value</th>\n","      <th>newcol</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>1.764052</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>0.978738</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key     value  newcol\n","0   A  1.764052     NaN\n","1   B  0.400157     0.0\n","2   C  0.978738     NaN\n","3   D  2.240893     1.0"]},"metadata":{"tags":[]},"execution_count":652}]},{"cell_type":"markdown","metadata":{"id":"PYcC5E6Y6XC1"},"source":["# **Menggabungkan beberapa kolom**\n","\n","`left.merge(right, on=['key1', 'key2'] ...)`\n","\n","Atau, jika namanya berbeda,\n","\n","`left.merge(right, left_on=['lkey1', 'lkey2'], right_on=['rkey1', 'rkey2'])`"]},{"cell_type":"markdown","metadata":{"id":"NzGp5nLl7B_n"},"source":["# **Generalisasi: mergeing beberapa DataFrames**"]},{"cell_type":"code","metadata":{"id":"xvO9ATrM7EGd","executionInfo":{"status":"ok","timestamp":1617350488683,"user_tz":-480,"elapsed":4326,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":["np.random.seed(0)\n","A = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'valueA': np.random.randn(4)})    \n","B = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'valueB': np.random.randn(4)})\n","C = pd.DataFrame({'key': ['D', 'E', 'J', 'C'], 'valueC': np.ones(4)}) "],"execution_count":653,"outputs":[]},{"cell_type":"code","metadata":{"id":"6akr31pq7MeY","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350488683,"user_tz":-480,"elapsed":4316,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"a0547dfb-6451-4c02-fdf4-49f975333266"},"source":["A"],"execution_count":654,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>valueA</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>1.764052</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>0.978738</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key    valueA\n","0   A  1.764052\n","1   B  0.400157\n","2   C  0.978738\n","3   D  2.240893"]},"metadata":{"tags":[]},"execution_count":654}]},{"cell_type":"code","metadata":{"id":"MZeD9fyx7Nrm","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350488683,"user_tz":-480,"elapsed":4302,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"a9f5fae7-01fe-4f6f-9326-edbc775f3971"},"source":["B"],"execution_count":655,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>valueB</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>B</td>\n","      <td>1.867558</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>D</td>\n","      <td>-0.977278</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>E</td>\n","      <td>0.950088</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>F</td>\n","      <td>-0.151357</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key    valueB\n","0   B  1.867558\n","1   D -0.977278\n","2   E  0.950088\n","3   F -0.151357"]},"metadata":{"tags":[]},"execution_count":655}]},{"cell_type":"code","metadata":{"id":"M0tHtbrk7O3X","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1617350488684,"user_tz":-480,"elapsed":4288,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"e331c6ba-38d6-46e7-eeb1-9f88732d7d3f"},"source":["C"],"execution_count":656,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>valueC</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>D</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>E</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>J</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>C</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key  valueC\n","0   D     1.0\n","1   E     1.0\n","2   J     1.0\n","3   C     1.0"]},"metadata":{"tags":[]},"execution_count":656}]},{"cell_type":"markdown","metadata":{"id":"1w_X9u-u78Ux"},"source":["## Inner Join"]},{"cell_type":"code","metadata":{"id":"-XC9F2Rg7WPZ","colab":{"base_uri":"https://localhost:8080/","height":77},"executionInfo":{"status":"ok","timestamp":1617350488684,"user_tz":-480,"elapsed":4274,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"146daf86-4af3-48ce-b7b3-6485c42f0b67"},"source":["A.merge(B, on='key').merge(C, on='key')"],"execution_count":657,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>valueA</th>\n","      <th>valueB</th>\n","      <th>valueC</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key    valueA    valueB  valueC\n","0   D  2.240893 -0.977278     1.0"]},"metadata":{"tags":[]},"execution_count":657}]},{"cell_type":"code","metadata":{"id":"tYzSp6rkmc-z","executionInfo":{"status":"ok","timestamp":1617350488685,"user_tz":-480,"elapsed":4273,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":["dfs = [A, B, C]"],"execution_count":658,"outputs":[]},{"cell_type":"code","metadata":{"id":"vKH-tK6W8Ecj","colab":{"base_uri":"https://localhost:8080/","height":77},"executionInfo":{"status":"ok","timestamp":1617350488685,"user_tz":-480,"elapsed":4262,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"2122125f-4e6b-4250-8f00-a15afb3e30f1"},"source":["from functools import reduce\n","reduce(pd.merge, dfs)"],"execution_count":659,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>valueA</th>\n","      <th>valueB</th>\n","      <th>valueC</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key    valueA    valueB  valueC\n","0   D  2.240893 -0.977278     1.0"]},"metadata":{"tags":[]},"execution_count":659}]},{"cell_type":"markdown","metadata":{"id":"0If2XWEM8Peb"},"source":["## Outer Join"]},{"cell_type":"code","metadata":{"id":"0waPyMnI9dLK","colab":{"base_uri":"https://localhost:8080/","height":254},"executionInfo":{"status":"ok","timestamp":1617350488686,"user_tz":-480,"elapsed":4252,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"775e9564-aee7-4659-e75f-bbe77e8ea8d7"},"source":["from functools import partial\n","outer_merge = partial(pd.merge, how='outer')\n","reduce(outer_merge, dfs)"],"execution_count":660,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>valueA</th>\n","      <th>valueB</th>\n","      <th>valueC</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>1.764052</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>0.400157</td>\n","      <td>1.867558</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>0.978738</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>0.950088</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>F</td>\n","      <td>NaN</td>\n","      <td>-0.151357</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>J</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key    valueA    valueB  valueC\n","0   A  1.764052       NaN     NaN\n","1   B  0.400157  1.867558     NaN\n","2   C  0.978738       NaN     1.0\n","3   D  2.240893 -0.977278     1.0\n","4   E       NaN  0.950088     1.0\n","5   F       NaN -0.151357     NaN\n","6   J       NaN       NaN     1.0"]},"metadata":{"tags":[]},"execution_count":660}]},{"cell_type":"markdown","metadata":{"id":"iBxIMDOr91Yw"},"source":["Seperti yang mungkin telah Anda perhatikan, ini cukup kuat — Anda juga dapat menggunakannya untuk mengontrol nama kolom selama penggabungan. Cukup tambahkan lebih banyak argumen kata kunci sesuai kebutuhan:\n","\n","`partial(pd.merge, how='outer', left_index=True, right_on=...)`\n","\n","Alternatifnya: `pd.concat`\n","\n","Jika nilai kolom Anda unik, maka masuk akal untuk menggunakan pd.concat, ini lebih cepat daripada gabungan dua arah dua kali."]},{"cell_type":"code","metadata":{"id":"fg0-5ZYX9685","colab":{"base_uri":"https://localhost:8080/","height":77},"executionInfo":{"status":"ok","timestamp":1617350488686,"user_tz":-480,"elapsed":4239,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"f103bf53-3075-4c1e-e0ae-50271e4e19c9"},"source":["pd.concat([\n","    df.set_index('key') for df in dfs], axis=1, join='inner'\n",").reset_index()"],"execution_count":661,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>valueA</th>\n","      <th>valueB</th>\n","      <th>valueC</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>D</td>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  key    valueA    valueB  valueC\n","0   D  2.240893 -0.977278     1.0"]},"metadata":{"tags":[]},"execution_count":661}]},{"cell_type":"markdown","metadata":{"id":"YmDKxAqc-GJx"},"source":["# **Multiway bergabung pada indeks unik**\n","\n","Jika Anda menggabungkan beberapa DataFrames pada indeks unik, Anda harus sekali lagi memilih pd.concat untuk kinerja yang lebih baik."]},{"cell_type":"code","metadata":{"id":"eGDT7lI3-Fur","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350488686,"user_tz":-480,"elapsed":4226,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"09bf8cd9-6c69-4c73-c8ad-b77a22ae51e0"},"source":["# Note, the \"key\" column values are unique, so the index is unique.\n","A2 = A.set_index('key')\n","B2 = B.set_index('key')\n","C2 = C.set_index('key')\n","dfs2 = [A2, B2, C2]\n","pd.concat(dfs2, axis=1, sort=False, join='inner')"],"execution_count":662,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>valueA</th>\n","      <th>valueB</th>\n","      <th>valueC</th>\n","    </tr>\n","    <tr>\n","      <th>key</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>D</th>\n","      <td>2.240893</td>\n","      <td>-0.977278</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       valueA    valueB  valueC\n","key                            \n","D    2.240893 -0.977278     1.0"]},"metadata":{"tags":[]},"execution_count":662}]},{"cell_type":"markdown","metadata":{"id":"BhzdnDnt-c2g"},"source":["# **Multiway menggabungkan indeks dengan duplikat**\n","\n","concat cepat, tetapi memiliki kekurangannya. Itu tidak bisa menangani duplikat."]},{"cell_type":"code","metadata":{"id":"0me49zmm-onI","executionInfo":{"status":"ok","timestamp":1617350488687,"user_tz":-480,"elapsed":4216,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":["A3 = pd.DataFrame({'key': ['A', 'B', 'C', 'D', 'D'], 'valueA': np.random.randn(5)})\n","# pd.concat([df.set_index('key') for df in [A3, B, C]], axis=1, join='inner')\n","# ValueError: Shape of passed values is (3, 4), indices imply (3, 2)"],"execution_count":663,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T087vqri-0Ed"},"source":["Dalam situasi ini, join adalah pilihan terbaik, karena dapat menangani indeks yang tidak unik (join memanggil merge di bawah tenda)."]},{"cell_type":"code","metadata":{"id":"2Mwqok0F-zth","colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"status":"ok","timestamp":1617350488687,"user_tz":-480,"elapsed":4210,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"c1c1da04-02c2-42a7-e203-50a4e4a7434f"},"source":["# For inner join. For left join, pass `pd.DataFrame.join` directly to `reduce`. \n","inner_join = partial(pd.DataFrame.join, how='inner')\n","reduce(inner_join, [A3.set_index('key'), B2, C2])"],"execution_count":664,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>valueA</th>\n","      <th>valueB</th>\n","      <th>valueC</th>\n","    </tr>\n","    <tr>\n","      <th>key</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>D</th>\n","      <td>1.454274</td>\n","      <td>-0.977278</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>D</th>\n","      <td>0.761038</td>\n","      <td>-0.977278</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       valueA    valueB  valueC\n","key                            \n","D    1.454274 -0.977278     1.0\n","D    0.761038 -0.977278     1.0"]},"metadata":{"tags":[]},"execution_count":664}]},{"cell_type":"markdown","metadata":{"id":"CIaLlkGJV9ec"},"source":["# **Task**"]},{"cell_type":"markdown","metadata":{"id":"gH7LltEsXH7_"},"source":["## **Example 1**"]},{"cell_type":"code","metadata":{"id":"OSB6OV134KE_","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1617350488688,"user_tz":-480,"elapsed":4201,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"f2e824fd-7fa8-4d28-e57c-7d81fa3ce545"},"source":["# Dummy Data 1\n","\n","dummy_data1 = {\n","    'id':['1', '2', '3', '4', '5'],\n","    'Feature1':['A', 'C', 'E', 'G', 'I'], \n","    'Feature2':['B', 'D', 'F', 'H', 'J']\n","}\n","\n","df1 = pd.DataFrame(dummy_data1, columns = ['id', 'Feature1', 'Feature2'])\n","df1"],"execution_count":665,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Feature1</th>\n","      <th>Feature2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>A</td>\n","      <td>B</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>C</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>E</td>\n","      <td>F</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>G</td>\n","      <td>H</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>I</td>\n","      <td>J</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  id Feature1 Feature2\n","0  1        A        B\n","1  2        C        D\n","2  3        E        F\n","3  4        G        H\n","4  5        I        J"]},"metadata":{"tags":[]},"execution_count":665}]},{"cell_type":"code","metadata":{"id":"IsjIwwnR6GRo","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1617350488688,"user_tz":-480,"elapsed":4190,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"03f47f61-ce59-40a3-f583-5b37cb77f2c9"},"source":["# Dummy Data 2\n","\n","dummy_data2 = {\n","    'id':['1', '2', '6', '7', '8'],\n","    'Feature1':['K', 'M', 'O', 'Q', 'S'], \n","    'Feature2':['L', 'N', 'P', 'R', 'T']\n","}\n","\n","df2 = pd.DataFrame(dummy_data2, columns = ['id', 'Feature1', 'Feature2'])\n","df2"],"execution_count":666,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Feature1</th>\n","      <th>Feature2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>K</td>\n","      <td>L</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6</td>\n","      <td>O</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7</td>\n","      <td>Q</td>\n","      <td>R</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>8</td>\n","      <td>S</td>\n","      <td>T</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  id Feature1 Feature2\n","0  1        K        L\n","1  2        M        N\n","2  6        O        P\n","3  7        Q        R\n","4  8        S        T"]},"metadata":{"tags":[]},"execution_count":666}]},{"cell_type":"code","metadata":{"id":"Ilb6cT0I6tUH","colab":{"base_uri":"https://localhost:8080/","height":343},"executionInfo":{"status":"ok","timestamp":1617350488689,"user_tz":-480,"elapsed":4180,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"31f8b336-6587-45c8-ce99-2fd9ee47ee5b"},"source":["# Dummy Data 3\n","\n","dummy_data3 = {\n","    'id':['1', '2', '3', '4', '5', '7', '8', '9', '10', '11'],\n","    'Feature3':[12, 13, 14, 15, 16, 17, 15, 12, 13, 23]\n","}\n","\n","df3 = pd.DataFrame(dummy_data3, columns = ['id', 'Feature3'])\n","df3"],"execution_count":667,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Feature3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>7</td>\n","      <td>17</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>8</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>9</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>10</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>11</td>\n","      <td>23</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   id  Feature3\n","0   1        12\n","1   2        13\n","2   3        14\n","3   4        15\n","4   5        16\n","5   7        17\n","6   8        15\n","7   9        12\n","8  10        13\n","9  11        23"]},"metadata":{"tags":[]},"execution_count":667}]},{"cell_type":"code","metadata":{"id":"stw1L-OKQoyg","colab":{"base_uri":"https://localhost:8080/","height":343},"executionInfo":{"status":"ok","timestamp":1617350488689,"user_tz":-480,"elapsed":4169,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"5aaa9de2-bac2-49e3-e9ab-f8ee2e04bb53"},"source":["# Menggabungkan Data 1 dan Data 2 menggunakan concat pada row\n","df_list = [df1 , df2]\n","pd.concat(df_list)"],"execution_count":668,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Feature1</th>\n","      <th>Feature2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>A</td>\n","      <td>B</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>C</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>E</td>\n","      <td>F</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>G</td>\n","      <td>H</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>I</td>\n","      <td>J</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>K</td>\n","      <td>L</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6</td>\n","      <td>O</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7</td>\n","      <td>Q</td>\n","      <td>R</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>8</td>\n","      <td>S</td>\n","      <td>T</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  id Feature1 Feature2\n","0  1        A        B\n","1  2        C        D\n","2  3        E        F\n","3  4        G        H\n","4  5        I        J\n","0  1        K        L\n","1  2        M        N\n","2  6        O        P\n","3  7        Q        R\n","4  8        S        T"]},"metadata":{"tags":[]},"execution_count":668}]},{"cell_type":"code","metadata":{"id":"KpGV21swRUJG","colab":{"base_uri":"https://localhost:8080/","height":343},"executionInfo":{"status":"ok","timestamp":1617350488690,"user_tz":-480,"elapsed":4159,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"cd691336-d75d-4b82-91aa-19cd78808c1d"},"source":["pd.concat(df_list, ignore_index=True)"],"execution_count":669,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Feature1</th>\n","      <th>Feature2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>A</td>\n","      <td>B</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>C</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>E</td>\n","      <td>F</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>G</td>\n","      <td>H</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>I</td>\n","      <td>J</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>1</td>\n","      <td>K</td>\n","      <td>L</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>6</td>\n","      <td>O</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>7</td>\n","      <td>Q</td>\n","      <td>R</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>8</td>\n","      <td>S</td>\n","      <td>T</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  id Feature1 Feature2\n","0  1        A        B\n","1  2        C        D\n","2  3        E        F\n","3  4        G        H\n","4  5        I        J\n","5  1        K        L\n","6  2        M        N\n","7  6        O        P\n","8  7        Q        R\n","9  8        S        T"]},"metadata":{"tags":[]},"execution_count":669}]},{"cell_type":"code","metadata":{"id":"EmatqH9eSDcc","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1617350488690,"user_tz":-480,"elapsed":4146,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"97e55849-22f1-4718-c796-54e5fd7ba87c"},"source":["# menggabungkan data pada column\n","pd.concat(df_list, axis=1, ) # default axis = 0"],"execution_count":670,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Feature1</th>\n","      <th>Feature2</th>\n","      <th>id</th>\n","      <th>Feature1</th>\n","      <th>Feature2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>1</td>\n","      <td>K</td>\n","      <td>L</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>C</td>\n","      <td>D</td>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>E</td>\n","      <td>F</td>\n","      <td>6</td>\n","      <td>O</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>G</td>\n","      <td>H</td>\n","      <td>7</td>\n","      <td>Q</td>\n","      <td>R</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>I</td>\n","      <td>J</td>\n","      <td>8</td>\n","      <td>S</td>\n","      <td>T</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  id Feature1 Feature2 id Feature1 Feature2\n","0  1        A        B  1        K        L\n","1  2        C        D  2        M        N\n","2  3        E        F  6        O        P\n","3  4        G        H  7        Q        R\n","4  5        I        J  8        S        T"]},"metadata":{"tags":[]},"execution_count":670}]},{"cell_type":"code","metadata":{"id":"12TQRHXjRpuy","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1617350488691,"user_tz":-480,"elapsed":4135,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"374b4727-f945-475b-b928-bfef914a8cfc"},"source":["# menggabungkan data pada column\n","pd.concat(df_list, ignore_index=True, axis=1) # default axis = 0"],"execution_count":671,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>1</td>\n","      <td>K</td>\n","      <td>L</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>C</td>\n","      <td>D</td>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>E</td>\n","      <td>F</td>\n","      <td>6</td>\n","      <td>O</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>G</td>\n","      <td>H</td>\n","      <td>7</td>\n","      <td>Q</td>\n","      <td>R</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>I</td>\n","      <td>J</td>\n","      <td>8</td>\n","      <td>S</td>\n","      <td>T</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   0  1  2  3  4  5\n","0  1  A  B  1  K  L\n","1  2  C  D  2  M  N\n","2  3  E  F  6  O  P\n","3  4  G  H  7  Q  R\n","4  5  I  J  8  S  T"]},"metadata":{"tags":[]},"execution_count":671}]},{"cell_type":"code","metadata":{"id":"Ff_btRRdSBKY","colab":{"base_uri":"https://localhost:8080/","height":343},"executionInfo":{"status":"ok","timestamp":1617350488691,"user_tz":-480,"elapsed":4122,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"807e387d-82c3-4120-d338-0ea3a686c896"},"source":["# Menggabungkan Data 1 dan Data 2 menggunakan concat pada row\n","df_list = [df1 , df2]\n","df12 = pd.concat(df_list)\n","df12"],"execution_count":672,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Feature1</th>\n","      <th>Feature2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>A</td>\n","      <td>B</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>C</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>E</td>\n","      <td>F</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>G</td>\n","      <td>H</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>I</td>\n","      <td>J</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>K</td>\n","      <td>L</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6</td>\n","      <td>O</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7</td>\n","      <td>Q</td>\n","      <td>R</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>8</td>\n","      <td>S</td>\n","      <td>T</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  id Feature1 Feature2\n","0  1        A        B\n","1  2        C        D\n","2  3        E        F\n","3  4        G        H\n","4  5        I        J\n","0  1        K        L\n","1  2        M        N\n","2  6        O        P\n","3  7        Q        R\n","4  8        S        T"]},"metadata":{"tags":[]},"execution_count":672}]},{"cell_type":"code","metadata":{"id":"PhHfYGkNT--N","colab":{"base_uri":"https://localhost:8080/","height":343},"executionInfo":{"status":"ok","timestamp":1617350488692,"user_tz":-480,"elapsed":4112,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"aca0d1db-100f-408f-e4a1-1497e75c2cf5"},"source":["df3"],"execution_count":673,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Feature3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>7</td>\n","      <td>17</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>8</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>9</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>10</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>11</td>\n","      <td>23</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   id  Feature3\n","0   1        12\n","1   2        13\n","2   3        14\n","3   4        15\n","4   5        16\n","5   7        17\n","6   8        15\n","7   9        12\n","8  10        13\n","9  11        23"]},"metadata":{"tags":[]},"execution_count":673}]},{"cell_type":"code","metadata":{"id":"pSmTOTdcUCDC","colab":{"base_uri":"https://localhost:8080/","height":314},"executionInfo":{"status":"ok","timestamp":1617350488692,"user_tz":-480,"elapsed":4099,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"9fd1a1f0-9013-4e26-b1e3-254ece311d8d"},"source":["pd.merge(df12, df3, on='id')"],"execution_count":674,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Feature1</th>\n","      <th>Feature2</th>\n","      <th>Feature3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>K</td>\n","      <td>L</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>C</td>\n","      <td>D</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3</td>\n","      <td>E</td>\n","      <td>F</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>4</td>\n","      <td>G</td>\n","      <td>H</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>5</td>\n","      <td>I</td>\n","      <td>J</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>7</td>\n","      <td>Q</td>\n","      <td>R</td>\n","      <td>17</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>8</td>\n","      <td>S</td>\n","      <td>T</td>\n","      <td>15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  id Feature1 Feature2  Feature3\n","0  1        A        B        12\n","1  1        K        L        12\n","2  2        C        D        13\n","3  2        M        N        13\n","4  3        E        F        14\n","5  4        G        H        15\n","6  5        I        J        16\n","7  7        Q        R        17\n","8  8        S        T        15"]},"metadata":{"tags":[]},"execution_count":674}]},{"cell_type":"code","metadata":{"id":"W8l_3KiZUZn6","colab":{"base_uri":"https://localhost:8080/","height":314},"executionInfo":{"status":"ok","timestamp":1617350488693,"user_tz":-480,"elapsed":4089,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"666aa526-6573-4cec-c752-219d88e6b344"},"source":["df3.columns = ['idkey', 'Feature3']\n","pd.merge(df12, df3, left_on='id', right_on='idkey')"],"execution_count":675,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Feature1</th>\n","      <th>Feature2</th>\n","      <th>idkey</th>\n","      <th>Feature3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>A</td>\n","      <td>B</td>\n","      <td>1</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>K</td>\n","      <td>L</td>\n","      <td>1</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>C</td>\n","      <td>D</td>\n","      <td>2</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>2</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3</td>\n","      <td>E</td>\n","      <td>F</td>\n","      <td>3</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>4</td>\n","      <td>G</td>\n","      <td>H</td>\n","      <td>4</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>5</td>\n","      <td>I</td>\n","      <td>J</td>\n","      <td>5</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>7</td>\n","      <td>Q</td>\n","      <td>R</td>\n","      <td>7</td>\n","      <td>17</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>8</td>\n","      <td>S</td>\n","      <td>T</td>\n","      <td>8</td>\n","      <td>15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  id Feature1 Feature2 idkey  Feature3\n","0  1        A        B     1        12\n","1  1        K        L     1        12\n","2  2        C        D     2        13\n","3  2        M        N     2        13\n","4  3        E        F     3        14\n","5  4        G        H     4        15\n","6  5        I        J     5        16\n","7  7        Q        R     7        17\n","8  8        S        T     8        15"]},"metadata":{"tags":[]},"execution_count":675}]},{"cell_type":"markdown","metadata":{"id":"cu2NAes7XNIi"},"source":["## **Example 2**"]},{"cell_type":"markdown","metadata":{"id":"Kn2L7gz1Cjak"},"source":["<h2>Soal 1: Penggabungan Data</h2>\n","\n","- Sebutkan perbedaan antara full outer join, inner join, dan left join\n"]},{"cell_type":"markdown","metadata":{"id":"lz5KBMyXCjau"},"source":["Jawab:\n","\n","\n","Pada Outer Join, nilai dari left dan right data akan digabungkan tapi akan menghasilkan Nilai NaN untuk bagian kepemilikan selain both yakni yang dimiliki keduanya.\n","\n","Pada Inner Join dapat dikatakan Intersect untuk left dan right data, maka yang akan value hasil dari fungsi ini adalah hanya both yakni yang dimiliki keduanya.\n","\n","Pada Left Join, akan menggabungkan data pada left data dan intersect atau both dari keduanya.\n"]},{"cell_type":"markdown","metadata":{"id":"H8k-jVewCjax"},"source":["<h2>Soal 2: Penggabungan Data</h2>\n","\n","Pada quiz no 2 ini gunakan data [names1881.csv](https://drive.google.com/uc?export=download&id=1Pwu3cv93hI79jmi52kJ05xhophknDKat) dan [names1981.csv](https://drive.google.com/uc?export=download&id=1pvsGaybr423hJXcN35e5nS3sg4ha4jo3), data ini berisi nama bayi yang lahir pada tahun 1881 atau 1981 di Amerika.\n","\n","- Baca data tersebut dengan memberikan nama column 'Name', 'Gender', 'Count'.\n","- Tunjukan jumlah dimensi dari data 'names1881.csv' dan 'names1981.csv'\n","- Gabungkan kedua data tersebut berdasarkan sumbu baris\n","- Tunjukan jumlah dimensi dari data setelah di gabungkan."]},{"cell_type":"code","metadata":{"id":"nThN7zO2Cjaz","colab":{"base_uri":"https://localhost:8080/","height":507},"executionInfo":{"status":"ok","timestamp":1617350490489,"user_tz":-480,"elapsed":5869,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"a4b5fe12-5ab5-4a0f-d88d-29e84982704e"},"source":["import pandas as pd\n","# read data\n","# '/content/drive/My Drive/Colab Notebooks/Wooky Pandas/names1881.csv'\n","df1 = pd.read_csv('https://drive.google.com/uc?id=1YIXkct-IhPdUONkZKKmsS5jHY9NGJ3kj', names=['Name', 'Gender', 'Count'])\n","# '/content/drive/My Drive/Colab Notebooks/Wooky Pandas/names1981.csv'\n","df2 = pd.read_csv('https://drive.google.com/uc?id=1T5qJGVvsxWBRlI1nC9bfwmF7IiyKVZ62', names=['Name', 'Gender', 'Count'])\n","\n","# periksa dimensi dari kedua data\n","print(\"Jumlah Dimensi data 'names1881.csv' :\")\n","print(df1.shape)\n","\n","# gabungkan data\n","print(\"Jumlah Baris data 'names1981.csv' :\")\n","print(df2.shape)\n","\n","df = pd.concat([df1,df2])\n","display(df)\n","\n","# periksa dimensi data hasil gabungan\n","print(\"Jumlah dimensi data setelah penggabungan : \")\n","print(df2.shape)"],"execution_count":676,"outputs":[{"output_type":"stream","text":["Jumlah Dimensi data 'names1881.csv' :\n","(1935, 3)\n","Jumlah Baris data 'names1981.csv' :\n","(19455, 3)\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Gender</th>\n","      <th>Count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Mary</td>\n","      <td>F</td>\n","      <td>6919</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Anna</td>\n","      <td>F</td>\n","      <td>2698</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Emma</td>\n","      <td>F</td>\n","      <td>2034</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Elizabeth</td>\n","      <td>F</td>\n","      <td>1852</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Margaret</td>\n","      <td>F</td>\n","      <td>1658</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>19450</th>\n","      <td>Zeferino</td>\n","      <td>M</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>19451</th>\n","      <td>Zerrick</td>\n","      <td>M</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>19452</th>\n","      <td>Zimbabwe</td>\n","      <td>M</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>19453</th>\n","      <td>Zoltan</td>\n","      <td>M</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>19454</th>\n","      <td>Zuriel</td>\n","      <td>M</td>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>21390 rows × 3 columns</p>\n","</div>"],"text/plain":["            Name Gender  Count\n","0           Mary      F   6919\n","1           Anna      F   2698\n","2           Emma      F   2034\n","3      Elizabeth      F   1852\n","4       Margaret      F   1658\n","...          ...    ...    ...\n","19450   Zeferino      M      5\n","19451    Zerrick      M      5\n","19452   Zimbabwe      M      5\n","19453     Zoltan      M      5\n","19454     Zuriel      M      5\n","\n","[21390 rows x 3 columns]"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Jumlah dimensi data setelah penggabungan : \n","(19455, 3)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"vxp88Xe5CjbF"},"source":["Expected Result: \n","\n","Jumlah Dimensi data 'names1881.csv': \n","\n","(1935, 3)\n","\n","Jumlah Baris data 'names1981.csv':\n","\n","(19455, 3)\n","\n","![alt text](https://drive.google.com/uc?id=1Ba3hYqyBksUTJUEDCr2jRh0BwzcqNR61)\n","\n","Jumlah dimensi data setelah penggabungan : \n","\n","(21390, 3)"]},{"cell_type":"markdown","metadata":{"id":"yALBDvlQCjbJ"},"source":["<h2>Soal 3: Penggabungan Data</h2>\n","\n","Lakukan jenis penggabungan data full outer join, inner join, left outer join dan right outer join pada kedua data berikut: "]},{"cell_type":"code","metadata":{"id":"GQtYaV1gCjbM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617350490490,"user_tz":-480,"elapsed":5858,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"28c0f20b-7355-4b28-cae9-3eee88d95018"},"source":["import pandas as pd\n","\n","data1 = {\n","    'id' : [1, 2, 3, 4],\n","    'Feature1' : ['a1', 'a2', 'a3', 'a4'],\n","    'Feature2' : ['b1', 'b2', 'b3', 'b4']\n","}\n","\n","data2 = {\n","    'id' : [3, 4, 5 ,6, 7],\n","    'Feature3' : ['c1', 'c2', 'c3', 'c4', 'c5']\n","}\n","\n","df1= pd.DataFrame(data1)\n","df2= pd.DataFrame(data2)\n","\n","print(df1, end='\\n\\n')\n","print(df2)"],"execution_count":677,"outputs":[{"output_type":"stream","text":["   id Feature1 Feature2\n","0   1       a1       b1\n","1   2       a2       b2\n","2   3       a3       b3\n","3   4       a4       b4\n","\n","   id Feature3\n","0   3       c1\n","1   4       c2\n","2   5       c3\n","3   6       c4\n","4   7       c5\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sMuRgJYhCjbg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617350490491,"user_tz":-480,"elapsed":5848,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"d05ece39-99df-4876-a6ec-79f4c04e52c2"},"source":["# join data\n","df_outer_join = pd.merge(df1, df2, on='id', how='outer')\n","print(df_outer_join, end='\\n\\n')\n","\n","df_inner_join = pd.merge(df1, df2, on='id', how='inner')\n","print(df_inner_join, end='\\n\\n')\n","\n","df_left_join = pd.merge(df1, df2, on='id', how='left')\n","print(df_left_join, end='\\n\\n')\n","\n","df_right_join = pd.merge(df1, df2, on='id', how='right')\n","print(df_right_join, end='\\n\\n')"],"execution_count":678,"outputs":[{"output_type":"stream","text":["   id Feature1 Feature2 Feature3\n","0   1       a1       b1      NaN\n","1   2       a2       b2      NaN\n","2   3       a3       b3       c1\n","3   4       a4       b4       c2\n","4   5      NaN      NaN       c3\n","5   6      NaN      NaN       c4\n","6   7      NaN      NaN       c5\n","\n","   id Feature1 Feature2 Feature3\n","0   3       a3       b3       c1\n","1   4       a4       b4       c2\n","\n","   id Feature1 Feature2 Feature3\n","0   1       a1       b1      NaN\n","1   2       a2       b2      NaN\n","2   3       a3       b3       c1\n","3   4       a4       b4       c2\n","\n","   id Feature1 Feature2 Feature3\n","0   3       a3       b3       c1\n","1   4       a4       b4       c2\n","2   5      NaN      NaN       c3\n","3   6      NaN      NaN       c4\n","4   7      NaN      NaN       c5\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"p2YbxGt8Cjb1"},"source":["Expected Result:\n","\n","![alt text](https://drive.google.com/uc?id=1E02b26JAztZICpfusZCeN-l0CzQgJbty)\n","\n","![alt text](https://drive.google.com/uc?id=1InsmnHUaIid7oZfY84qF-wm4Z-KMKYQp)\n","\n","![alt text](https://drive.google.com/uc?id=1RtD1vmgxE84irXcl_yNpnX842YeIe5le)\n","\n","![alt text](https://drive.google.com/uc?id=1STZULNbGvCtBrFLLGDlQoNV2nimrQ9F6)"]},{"cell_type":"markdown","metadata":{"id":"2hfhFcsACjb4"},"source":["<h2>Soal 4: Penggabungan Data berbeda label column Key</h2>\n","\n","Lakukan jenis penggabungan inner join untuk 2 data yang memiliki nama column key yang berbeda ini:"]},{"cell_type":"code","metadata":{"id":"9eE1RWfKCjb9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617350490491,"user_tz":-480,"elapsed":5838,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"d73137b1-3fb7-47f2-d3db-8d6d94a14f12"},"source":["data1 = {\n","    'key_data1' : [1, 2, 3, 4],\n","    'Feature1' : ['a1', 'a2', 'a3', 'a4'],\n","    'Feature2' : ['b1', 'b2', 'b3', 'b4']\n","}\n","\n","data2 = {\n","    'key_data2' : [3, 4, 5 ,6, 7],\n","    'Feature3' : ['c1', 'c2', 'c3', 'c4', 'c5']\n","}\n","\n","df1= pd.DataFrame(data1)\n","df2= pd.DataFrame(data2)\n","\n","print(df1, end='\\n\\n')\n","print(df2, end='\\n\\n')"],"execution_count":679,"outputs":[{"output_type":"stream","text":["   key_data1 Feature1 Feature2\n","0          1       a1       b1\n","1          2       a2       b2\n","2          3       a3       b3\n","3          4       a4       b4\n","\n","   key_data2 Feature3\n","0          3       c1\n","1          4       c2\n","2          5       c3\n","3          6       c4\n","4          7       c5\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OiD9K234CjcV","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"ok","timestamp":1617350490492,"user_tz":-480,"elapsed":5830,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}},"outputId":"b9bbd4c7-c21b-497b-fd26-c787b9e96b61"},"source":["# Gabungkan kedua data tersebut\n","df_gabung = pd.merge(df1, df2, left_on='key_data1', right_on='key_data2', how='inner')\n","df_gabung"],"execution_count":680,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key_data1</th>\n","      <th>Feature1</th>\n","      <th>Feature2</th>\n","      <th>key_data2</th>\n","      <th>Feature3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>a3</td>\n","      <td>b3</td>\n","      <td>3</td>\n","      <td>c1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4</td>\n","      <td>a4</td>\n","      <td>b4</td>\n","      <td>4</td>\n","      <td>c2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   key_data1 Feature1 Feature2  key_data2 Feature3\n","0          3       a3       b3          3       c1\n","1          4       a4       b4          4       c2"]},"metadata":{"tags":[]},"execution_count":680}]},{"cell_type":"markdown","metadata":{"id":"KP38kgIBCjco"},"source":["Expected Result:\n","\n","![alt text](https://drive.google.com/uc?id=1-B_n19R7RtaLUoTtAwxseaNVz1ardUJ8)"]},{"cell_type":"markdown","metadata":{"id":"Y-Ybt1FH382F"},"source":["# **Append**"]},{"cell_type":"code","metadata":{"id":"2hCgMxd43_rn","executionInfo":{"status":"ok","timestamp":1617350490492,"user_tz":-480,"elapsed":5819,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":[""],"execution_count":680,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ON8rdl_94ACd"},"source":["# **Join**"]},{"cell_type":"code","metadata":{"id":"sbkbtM3h4CEB","executionInfo":{"status":"ok","timestamp":1617350490493,"user_tz":-480,"elapsed":5815,"user":{"displayName":"Nur Imam Masri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgZ3lFNibc6IiqKG8y5skXagV5Pxj_73pfiuy7HIA=s64","userId":"17468474929689744386"}}},"source":[""],"execution_count":680,"outputs":[]}]}